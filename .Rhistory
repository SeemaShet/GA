log(25)
v <- c(22,23.9, 20.9,23.8,25, 24, 21.7,23.8,22.8,23.1,23.1,23.5,23.0,23)
log(v)
sum(log(v))
log25
log(25)
14/(14*3.21-43.95)
14*log(25)
45.06426-43.95
14/1.11
14/1.11426
14/1.114
knitr::opts_chunk$set(echo = TRUE)
load('mixedMember.Rda') #Loading required variables
calculateWeightedMean <- function(mu,wgt,ID){
return(sapply(1:length(wgt), function(i) sum(wgt[[i]]*mu[ID[[i]]])))
}
caseA_weightedMean <- calculateWeightedMean(muA,wgtsA,IDsA)
head(caseA_weightedMean)
caseB_weightedMean <- calculateWeightedMean(muB,wgtsB,IDsB)
head(caseB_weightedMean)
IDsA[0]
IDsA[1]
mus[1]
muA[1]
muA[1]
IDsA[1]
wgtsA[1]
muA
[124]
muA[124]
id[[1]]
ID[[1]]
IDsA[1]
IDsA[[1]]
IDsA[[1]][1]
wgtsA[[1]]
0.144243756*muA[124]
length(caseA_weightedMean)
head(IDsA)
IDsA[6]
wgtsA[6]
0.41666971*muA[493]+ 0.25973060*muA[91]+0.23851855*muA[74]+ 0.08508114*muA[20
0.41666971*muA[493]+ 0.25973060*muA[91]+0.23851855*muA[74]+ 0.08508114*muA[120]
caseA_weightedMean[[6]]
mean(4,3,1,5,6,4,5)
median(4,3,1,5,6,4,5)
mode(4,3,1,5,6,4,5)
?mode
getmode <- function(v) {
uniqv <- unique(v)
uniqv[which.max(tabulate(match(v, uniqv)))]
}
v <- c(4,3,1,5,6,4,5)
getmode(v)
mode(4,3,1,5,6,4,5,4)
median(4,3,1,5,6,4,5,4)
mean(4,3,1,5,6,4,5,4)
(1/3)^0.25
(1/3)^0.25/(4/3)
y <- 100
f <- function(){
y <- 10
g <- function(x) {
return(x + y + rnorm(1))
}
return(g)
}
## you can think of f() as a function constructor
h <- f()
h(3)
environment(f)
environment(h)
environment()
y <- 100
f <- function(){
print(environment())
y <- 10
g <- function(x) {
return(x + y + rnorm(1))
}
return(g)
}
## you can think of f() as a function constructor
h <- f()
h(3)
2^16
2^15
2^15-1
-2^15-1
2^31-1
.Machine$double.eps
options(scipen = 999)
.Machine$double.eps
.Machine$double.eps + 2
.Machine$double.eps + 1
.Machine$double.eps + 1 ==1
.Machine$double.eps + 1 ==2
.Machine$double.eps + 2 ==2
0.3-0.2
0.3-0.2 == 0.1
a <- 0.3
b <- 0.2
a-b
a-b ==0.1
format(a)
format(a,20)
format(a,20,format="f")
formatC(a,20,format="f")
?formatC
formatC(a)
formatC(a,20)
formatC(b,20)
formatC(b,20,format = 'f')
formatC(a,20,format = 'f')
1e-16
1e-16+1
1e-15+1
1e-15
1e-17
formatC(1e-16+1,20,format = 'f')
formatC(1e-15+1,20,format = 'f')
formatC(1,20,format = 'f')
formatC(1e-16,20,format = 'f')
formatC(1e-15,20,format = 'f')
formatC(.Machine$double.eps+1,format = 'f')
formatC(.Machine$double.eps+1,20,format = 'f')
formatC(.Machine$double.eps+2,20,format = 'f')
formatC(2,20,format = 'f')
formatC(1,20,format = 'f')
formatC(.Machine$double.eps,20,format = 'f')
0.120*0.120
0.1
formatC(b,20,format = 'f')
formatC(a-b,20,format = 'f')
formatC(0.1,20,format = 'f')
formatC(3,20,format = 'f')
formatC(27,20,format = 'f')
formatC(0.5,20,format = 'f')
formatC(0.75,20,format = 'f')
formatC(0.25,20,format = 'f')
formatC(0.275,20,format = 'f')
formatC(0.1,20,format = 'f')
formatC(0.2,20,format = 'f')
formatC(0.3,20,format = 'f')
formatC(1/2,20,format = 'f')
formatC(1/3,20,format = 'f')
formatC(0.1,20,format = 'f')
formatC(0.1,17,format = 'f')
formatC(0.1,16,format = 'f')
formatC(0.3-0.2,20,format = 'f')
formatC(0.3-0.2,17,format = 'f')
formatC(0.3-0.2,16,format = 'f')
formatC(0.3,16,format = 'f')
formatC(0.2,16,format = 'f')
formatC(0.2,20,format = 'f')
formatC(0.3,20,format = 'f')
.Machine$double.max.exp
.Machine$double.min.exp
2^1024
2^1023
log10(2^1023)
log10(2^1024)
.Machine$double.xmax
.Machine$double.xmin
10^308
10^-308
.Machine$integer.max
.Machine$integer.min
2^45
class(2^45)
as.integer(2^45)
1e308
1e309
a=12345678123456781000
b=12345678123456782000
a-b
abs(a-b)
.Machine$double.eps
.Machine$double.eps*abs(a+b)
.Machine$double.eps*abs(a-b)
abs(a+b)
c=1234567812345678
d=1234567812345677
c-d
.Machine$double.eps*abs(c+d
)
abs(c-d)
.Machine$double.eps*abs(2+.Machine$double.eps)
.Machine$double.eps*abs(1+.Machine$double.eps)
abs(.Machine$double.eps-2)
abs(.Machine$double.eps-1)
abs(3-4)
10^11
formatC(0.56)
formatC(0.56,20,format = 'f')
formatC(2,digits = 20,format = 'f')
formatC(1,digits = 20,format = 'f')
.Machine$double.eps
.Machine$double.eps + 2
.Machine$double.eps + 1
formatC(1+.Machine$double.eps,digits = 20,format = 'f')
formatC(2+.Machine$double.eps,digits = 20,format = 'f')
library(pryr)
bits(2)
bits(1)
bits(.Machine$double.eps)
bits(.Machine$double.eps + 2)
bits(.Machine$double.eps + 1)
bits(2(.Machine$double.eps) + 1)
bits(2*(.Machine$double.eps) + 1)
formatC(2+2*.Machine$double.eps,digits = 20,format = 'f')
formatC(2+.Machine$double.eps,digits = 20,format = 'f')
120*70
bits(2^-52)
bits(2)
bits(2)+bits(2)
bits(2)
bits(2)+bits(2^-51)
bits(2)
bits(2^-52)
bits(1)
3e8
3^(10000)^2
3^(10000^2)
3*(10000^2)
3*(10000^2)*8
3*(10000^2)*8/10^9
Sys.info()
sessionInfo()
search()
?Quotes
x <- rnorm(5)
x[3]
x[3] <- "hat"
x[3]
x
myfun <- function(...){
print(..1)
}
myfun(1,2,3,4)
myfun <- function(...){
print(..1)
print(..2)
print(..3)
print(..4)
print(..5)
}
myfun(1,2,3,4)
myfun <- function(...){
print(..1)
print(..2)
print(..3)
print(..4)
args <- list(....)
}
myfun <- function(...){
print(..1)
print(..2)
print(..3)
print(..4)
args <- list(....)
print(args)
}
myfun(1,2,3,4)
myfun <- function(...){
print(..1)
print(..2)
print(..3)
print(..4)
args <- list(...)
print(args)
}
myfun(1,2,3,4)
args(dgamma)
args(mean)
mat <- matrix(1:9, 3)
mat
?apply(array, margin, ...)
v
match.call(definition = mean,
call = quote(mean(y, na.rm = TRUE)))
match.call(definition = mean,
call = mean(y, na.rm = TRUE))
sys.nframe()
f <- function() {
cat('f: Frame number is ', sys.nframe(),
'; parent frame number is ', sys.parent(), '.\n', sep = '')
cat('f: Frame (i.e., environment) is: ')
print(sys.frame(sys.nframe()))
cat('f: Parent is ')
print(parent.frame())
cat('f: Two frames up is ')
print(sys.frame(-2))
}
f()
f <- function() {
cat('f: Frame number is ', sys.nframe(),
'; parent frame number is ', sys.parent(), '.\n', sep = '')
cat('f: Frame (i.e., environment) is: ')
print(sys.frame(sys.nframe()))
cat('f: Parent is ')
print(parent.frame())
cat('f: Two frames up is ')
print(sys.frame(1))
}
f()
sys.nframe()
f2 <- function() {
cat('f2: Frame (i.e., environment) is: ')
print(sys.frame(sys.nframe()))
cat('f2: Parent is ')
print(parent.frame())
f()
}
f2()
mat <- matrix(1:4, 2, 2)
mat
bits(2^-52)
bits(2^)
bits(2)
f <- function(a, b = d) {
d <- log(a);
return(a*b)
}
f(7)
log(7)
log(7)*7
d <- 100
f(7)
x <- 3
f <- function() {x <- x^2; print(x)}
f()
x # what do you expect?
x <- 3
f <- function() {x <- x^2; print(x)}
f()
x
f <- function() { assign('x', x^2, env = .GlobalEnv) }
f()
x
f <- function(x) { x <<- x^2 }
f(5)
?apply
X <- matrix(1:8,2,2)
X
X <- matrix(1:8,3,3)
X <- matrix(1:12,3,3)
X
X
apply(X,1,`[`,1:3)
?apply
X[1] `[`<- 1:3
apply(X,1,`[`,1:3)
X
X <- matrix(1:16,4,4)
apply(X,1,`[`,1:3)
X
x <- list(1:9)
x
`[`(x,2)
`[`(x,1)
`[[`(x,1)
`[`(x,1)
X <- matrix(1:12,4,4)
X
apply(X,1,`[`,1:3)
X[1,]
`[` (X[1,],1:3)
`[` (X[2,],1:3)
`[` (X[3,],1:3)
`[` (X[4,],1:3)
apply(X,1,`[[`,1:3)
apply(X,1,`[[`,1:3)
apply(X,1,`[`,1:3)
12+14.9+5+6.5+5.25+14.5+16.75
0.23+78.9i
object.size(0.23+78.9i)
a=0.23+78.9i
type(a)
typeof(a)
a
object.size(a)
rep(a,1e6)
b <- rep(a,1e6)
object.size(b)
16000048/1e6
tracemem(b)
b
b
tracemem(b)
b[1]
b[1] <- 0.347+769.i
tracemem(b)
memory.size()
setwd("D:/Berkeley")
devtools::create("GA")
devtools::document()
devtools::document()
devtools::document()
setwd("D:/")
devtools::create("GA")
getwd()
setwd("D:/GA")
devtools::install_github("madanparul/GA",auth_token = "f00cc8a8905df533dd69bf3d7aec40fd22423a39")
testthat::test_package("GA")
